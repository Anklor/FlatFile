// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FlatFile.Tests.Specifications
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class FixedLengthFileMappingFeatureFeature : Xunit.IUseFixture<FixedLengthFileMappingFeatureFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "FixedLengthFileMappingFeature.feature"
#line hidden
        
        public FixedLengthFileMappingFeatureFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FixedLengthFileMappingFeature", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(FixedLengthFileMappingFeatureFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "FixedLengthFileMappingFeature")]
        [Xunit.TraitAttribute("Description", "Add two numbers")]
        public virtual void AddTwoNumbers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add two numbers", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Length",
                        "PaddingChar",
                        "Padding",
                        "NullValue"});
            table1.AddRow(new string[] {
                        "Id",
                        "5",
                        "0",
                        "Left",
                        ""});
            table1.AddRow(new string[] {
                        "Description",
                        "25",
                        "<space>",
                        "Right",
                        ""});
            table1.AddRow(new string[] {
                        "NullableInt",
                        "5",
                        "0",
                        "Left",
                        "=Null"});
#line 4
 testRunner.Given("I have specification for \'TestObject\' fixed-length type", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Description",
                        "NullableInt"});
            table2.AddRow(new string[] {
                        "1",
                        "Description 1",
                        "00003"});
            table2.AddRow(new string[] {
                        "2",
                        "Description 2",
                        "00003"});
            table2.AddRow(new string[] {
                        "3",
                        "Description 3",
                        "00003"});
            table2.AddRow(new string[] {
                        "4",
                        "Description 4",
                        "00003"});
            table2.AddRow(new string[] {
                        "5",
                        "Description 5",
                        "=Null"});
            table2.AddRow(new string[] {
                        "6",
                        "Description 6",
                        "00003"});
            table2.AddRow(new string[] {
                        "7",
                        "Description 7",
                        "00003"});
            table2.AddRow(new string[] {
                        "8",
                        "Description 8",
                        "00003"});
            table2.AddRow(new string[] {
                        "9",
                        "Description 9",
                        "00003"});
            table2.AddRow(new string[] {
                        "10",
                        "Description 10",
                        "=Null"});
#line 9
 testRunner.And("I have several entities", ((string)(null)), table2, "And ");
#line 21
 testRunner.When("I convert entities to the fixed-length format", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 22
 testRunner.Then("the result should be", @"00001Description 1            00003
00002Description 2            00003
00003Description 3            00003
00004Description 4            00003
00005Description 5            =Null
00006Description 6            00003
00007Description 7            00003
00008Description 8            00003
00009Description 9            00003
00010Description 10           =Null
", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                FixedLengthFileMappingFeatureFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                FixedLengthFileMappingFeatureFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
